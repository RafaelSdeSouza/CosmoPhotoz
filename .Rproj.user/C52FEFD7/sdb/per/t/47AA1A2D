{
    "contents" : "#  R package GRAD file R/plotDiagPhotoZ.R\n#  Copyright (C) 2014  Rafael S. de Souza\n#\n#This program is free software: you can redistribute it and/or modify\n#it under the terms of the GNU General Public License version 3 as published by\n#the Free Software Foundation.\n\n#This program is distributed in the hope that it will be useful,\n#but WITHOUT ANY WARRANTY; without even the implied warranty of\n#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#GNU General Public License for more details.\n\n#  A copy of the GNU General Public License is available at\n#  http://www.r-project.org/Licenses/\n\n#' @title Plot Predict photometric vs observed redshift from a GLM fit \n#'\n#' \\code{plotDiagPhotoZ} returns diagnostic plots from the results of \n#' photometric redshifts. Different types of plots are available. The \n#' produced plots will be returned as ggplot objects.\n#' \n#' @import ggplot2 ggthemes\n#' @param  photoz vector\n#' @param  specz vector \n#'@param  type list \n#' @return ggplot object  \n#' @examples\n#'\n#' \\dontrun{\n#' sum(\"a\")\n#' }\n#' @export \nplotDiagPhotoZ <- function(photoz, specz, type=c(\"errordist\", \"predobs\", \"errorviolins\",\"box\")) {\n  \n  # First some basic error control\n  if( ! (type %in% c(\"errordist\", \"predobs\", \"errorviolins\",\"box\"))) {\n    stop(\"Error in plotDiagPhotoZ :: the chosen plot type is not implemented.\")\n  } \n  if( ! is.vector(photoz) ) {\n    stop(\"Error in plotDiagPhotoZ :: photoz is not a vector, and the code expects a vector.\")\n  }\n  if( ! is.vector(specz) ) {\n    stop(\"Error in plotDiagPhotoZ :: specz is not a vector, and the code expects a vector.\")\n  }\n\n  # Now, for the real work\n  # If the user wants to plot the error distributions\n  if(type==\"errordist\") {\n    sig <- data.frame(sigma=(photoz-specz)/(1+specz))\n    g1 <- ggplot(sig,x=sigma) + geom_density(aes(x=sigma),fill=\"#31a354\", alpha=0.6) + coord_cartesian(c(-1, 1)) +\n      xlab(expression((z[phot]-z[spec])/(1+z[spec]))) +\n      theme_economist_white(gray_bg = F, base_size = 11, base_family = \"sans\") +\n      theme(plot.title = element_text(hjust=0.5),\n          axis.title.y=element_text(vjust=0.75),\n          axis.title.x=element_text(vjust=-0.25),\n          text = element_text(size=20))\n    return(g1)\n  }\n  \n  # If the user wants to plot the predicted versus the reference values\n  if(type==\"predobs\") {\n    comb <- cbind(specz,photoz)\n    colnames(comb) <- c(\"zspec\",\"zphot\")\n    comb <- as.data.frame(comb)\n    p1 <- ggplot(comb,aes(x=zspec,y=zphot))\n    p2 <- p1 + stat_density2d(bins=200,geom=\"polygon\",aes(fill =..level..,alpha=..level..),na.rm = TRUE,trans=\"log\",n = 250,contour = TRUE) +\n      coord_cartesian(c(min(specz), max(specz)), c(min(photoz), max(photoz)))+xlab(expression(z[spec]))+ylab(expression(z[phot])) +\n      scale_fill_gradient2(guide=\"none\",low = \"#c7e9c0\", mid=\"#41ab5d\", high = \"#00441b\",space = \"rgb\") +\n      geom_abline(intercept = 0)+theme(legend.text = element_text(colour=\"gray40\"), legend.title=element_blank(), text = element_text(size=20),legend.position=c(0.1,0.75),axis.line = element_line(color = 'black')) +\n      geom_density2d(colour=\"gray60\", alpha=0.3, breaks = c(1, 5,10,25,50,100,200,250))+theme_gdocs() +\n      scale_alpha(guide=\"none\")\n#      scale_fill_gradient2(guide=\"none\",low = \"red\",mid=\"cyan\",high = \"blue2\", space = \"Lab\") \n    return(p2)\n  }\n\n  # If the user wants to plot the error distribution as violin plots within predetermined bins\n  if(type==\"errorviolins\") {\n    # Load the file\n    b2 <- factor(floor(specz * 10)/10)\n    error_photoZ <- (specz-photoz)/(1+specz)\n    dfd <- data.frame(z_photo=error_photoZ, z_spec=b2)  \n    p <- ggplot(dfd) + xlab(expression(z[spec])) + ylab(expression((z[photo]-z[spec])/(1+z[spec]))) + ylim(-0.5, 0.5)\n    p <- p + theme(legend.position = \"none\", axis.title.x = element_text(size=15), axis.title.y = element_text(size=15))\n    p <- p + geom_violin(aes(z_spec, z_photo), fill=\"#31a354\", alpha=0.8)+\n      theme_economist_white(gray_bg = F, base_size = 11, base_family = \"sans\") +\n      theme(plot.title = element_text(hjust=0.5),\n            axis.title.y=element_text(vjust=0.75),\n            axis.title.x=element_text(vjust=-0.25),\n            text = element_text(size=20))\n  \n    # hist_right <- ggplot(dfd) + geom_histogram(aes(z_photo), fill=\"dark magenta\", alpha=0.4, binwidth=.001) + xlim(-0.5, 0.5)\n    # hist_right <- hist_right + coord_flip() + theme(legend.position = \"none\",\n    #    axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_text(size=15)) + ylab(bquote(paste(\"count (x\",10^3,\")\") ))+ scale_y_continuous(breaks=c(0,5000,10000,15000), labels=c(0, 5, 10, 15))\n    # hist_right <- hist_right + theme(plot.margin = unit(c(1, 1, 0.6, -0.5), \"lines\"))\n  \n    return(p)\n    }\n\nif(type==\"box\") {\n  # Load the file\n  b2 <- factor(floor(specz * 10)/10)\n  error_photoZ <- (specz-photoz)/(1+specz)\n  dfd <- data.frame(z_photo=error_photoZ, z_spec=b2)  \n  p <- ggplot(dfd) + xlab(expression(z[spec])) + ylab(expression((z[photo]-z[spec])/(1+z[spec]))) + ylim(-0.5, 0.5)\n  p <- p + theme(legend.position = \"none\", axis.title.x = element_text(size=15), axis.title.y = element_text(size=15))\n  p <- p + geom_boxplot(aes(z_spec, z_photo), notch=F,fill=\"#31a354\", alpha=0.8,outlier.colour = \"gray\")+\n    theme_economist_white(gray_bg = F, base_size = 11, base_family = \"sans\") +\n    theme(plot.title = element_text(hjust=0.5),\n          axis.title.y=element_text(vjust=0.75),\n          axis.title.x=element_text(vjust=-0.25),\n          text = element_text(size=20))\n  \n  # hist_right <- ggplot(dfd) + geom_histogram(aes(z_photo), fill=\"dark magenta\", alpha=0.4, binwidth=.001) + xlim(-0.5, 0.5)\n  # hist_right <- hist_right + coord_flip() + theme(legend.position = \"none\",\n  #    axis.title.y = element_blank(), axis.text.y = element_blank(), axis.title.y = element_text(size=15)) + ylab(bquote(paste(\"count (x\",10^3,\")\") ))+ scale_y_continuous(breaks=c(0,5000,10000,15000), labels=c(0, 5, 10, 15))\n  # hist_right <- hist_right + theme(plot.margin = unit(c(1, 1, 0.6, -0.5), \"lines\"))\n  \n  return(p)\n}\n}\n\n\n",
    "created" : 1408410579732.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "871725603",
    "id" : "47AA1A2D",
    "lastKnownWriteTime" : 1408461394,
    "path" : "~/Dropbox/artigos/Meusartigos/IAA-WGC/Github/CosmoR/CosmoPhotoz/R/plotDiagPhotoZ.R",
    "project_path" : "R/plotDiagPhotoZ.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}